using System;
using System.Collections.Generic;

namespace Problem0012
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    ///     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// Let us list the factors of the first seven triangle numbers:
    ///     1: 1
    ///     3: 1,3
    ///     6: 1,2,3,6
    ///     10: 1,2,5,10
    ///     15: 1,3,5,15
    ///     21: 1,3,7,21
    ///     28: 1,2,4,7,14,28
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            List<Int64> tralst = new List<Int64>();
            tralst.Add(1);
            Console.Write("1,");

            while (true)
            {
                Int64 l = tralst[tralst.Count - 1] + (tralst.Count + 1);
                if (l >= 500)
                {
                    break;
                }
                tralst.Add(l);
                Console.Write(l + ",");
            }

            while (true)
            {
                Int64 l = tralst[tralst.Count - 1] + (tralst.Count + 1);

                int c = Divisors(l);
                if (c > 500)
                {
                    Console.WriteLine("");
                    Console.WriteLine(c + "," +  l);
                    break;
                }
                tralst.Add(l);
                Console.Write(l + ",");
            }
        }

        private static int Divisors(Int64 l)
        {
            int c = 0;
            Int64 k = (Int64)Math.Sqrt(l);
            if (l % k == 0)
            {
                c++;
            }

            for (Int64 i = k - 1; i >= 1; i--)
            {
                if (l % i == 0)
                {
                    c += 2;
                }
            }

            return c;
        }
    }
}
